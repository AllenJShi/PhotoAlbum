AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Lambda template 

Parameters:
  searchphotosName:
    Type: String
    Default: search-photos-cf

  indexphotosName:
    Type: String
    Default: index-photos-cf

Resources:
  S3Photos:
    Type: "AWS::S3::Bucket"
    Properties: 
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins: 
              - "*"
            AllowedMethods: 
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders: 
              - "*"

  S3PhotosBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Photos
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: S3PhotosBucketPolicy
            Action: 's3:*'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Photos
                - /*
            Principal: '*'


  indexphotosRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${indexphotosName}-role
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com", "cloudformation.amazonaws.com", "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ${indexphotosName}-role-basic-policy
          PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "logs:CreateLogGroup",
                        "Resource": "arn:aws:logs:us-east-1:240279741812:*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": [
                            "arn:aws:logs:us-east-1:240279741812:log-group:/aws/lambda/${indexphotosName}:*"
                        ]
                    }
                ]
            }
        - PolicyName: !Sub ${indexphotosName}-role-s3-policy
          PolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetObject"
                        ],
                        "Resource": "arn:aws:s3:::*"
                    }
                ]
            }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy


  indexphotos:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Ref indexphotosName
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: ./assets/lf1
      Description: >-
        An Amazon S3 trigger that retrieves metadata for the object that has
        been updated.
      MemorySize: 128
      Timeout: 3
      # Role: 'arn:aws:iam::240279741812:role/service-role/LF1-index-photos'
      Role: !GetAtt indexphotosRole.Arn
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref S3Photos
            Events:
              - 's3:ObjectCreated:Put'


  indexphotosPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt indexphotos.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt S3Photos.Arn
  


  searchphotosRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${searchphotosName}-role
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com", "cloudformation.amazonaws.com", "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ${searchphotosName}-role-basic-policy
          PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "logs:CreateLogGroup",
                        "Resource": "arn:aws:logs:us-east-1:240279741812:*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": [
                            "arn:aws:logs:us-east-1:240279741812:log-group:/aws/lambda/${searchphotosName}:*"
                        ]
                    }
                ]
            }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonLexFullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess


  searchphotos:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Ref searchphotosName
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: ./assets/lf2
      Description: 'search photos'
      MemorySize: 128
      Timeout: 3
      # Role: 'arn:aws:iam::240279741812:role/service-role/search-photos-role-fu63i46x'
      Role: !GetAtt searchphotosRole.Arn
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /search
            Method: GET

  searchphotosApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt searchphotos.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  searchphotosLexPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt searchphotos.Arn
      Action: lambda:InvokeFunction
      Principal: lex.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'